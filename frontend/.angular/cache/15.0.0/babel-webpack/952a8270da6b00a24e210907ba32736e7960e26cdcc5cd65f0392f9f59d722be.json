{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nlet FiltrareCentreComponent = class FiltrareCentreComponent {\n  constructor(centers) {\n    this.centers = centers;\n    this.zoom = 12;\n    this.options = {\n      mapTypeId: 'hybrid',\n      zoomControl: false,\n      scrollwheel: false,\n      disableDoubleClickZoom: true,\n      maxZoom: 15,\n      minZoom: 8\n    };\n    this.panelOpenState = false;\n    this.profileForm = new FormGroup({\n      firstName: new FormControl(''),\n      lastName: new FormControl(''),\n      phoneNumber: new FormControl(''),\n      email: new FormControl('')\n    });\n    this.estimatesForm = new FormGroup({\n      plastic: new FormControl(''),\n      menajer: new FormControl(''),\n      hartii: new FormControl(''),\n      baterii: new FormControl(''),\n      calculatoare: new FormControl(''),\n      sticla: new FormControl(''),\n      chimice: new FormControl(''),\n      metalice: new FormControl(''),\n      mercur: new FormControl('')\n    });\n  }\n  formatLabel(value) {\n    return value + 'kg';\n  }\n  ngOnInit() {\n    this.centers.getAllCenters().subscribe(resp => {\n      console.log(resp);\n      this.markers = resp;\n    });\n    navigator.geolocation.getCurrentPosition(position => {\n      this.center = {\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      };\n    });\n  }\n  zoomIn() {\n    if (this.zoom < 15) this.zoom++;\n  }\n  zoomOut() {\n    if (this.zoom > 0) this.zoom--;\n  }\n};\nFiltrareCentreComponent = __decorate([Component({\n  selector: 'app-filtrare-centre',\n  templateUrl: './filtrare-centre.component.html',\n  styleUrls: ['./filtrare-centre.component.scss']\n})], FiltrareCentreComponent);\nexport { FiltrareCentreComponent };\n/*\r\n1. plastic\r\n2. menajere\r\n3. hartii\r\n4. baterii\r\n5. calculatoare\r\n6. sticla\r\n7. chimice\r\n8. metalice\r\n9. mercur\r\n\r\n*/","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,WAAW,EAAEC,SAAS,QAAQ,gBAAgB;AAShD,IAAMC,uBAAuB,GAA7B,MAAMA,uBAAuB;EAwClCC,YAAoBC,OAAsB;IAAtB,YAAO,GAAPA,OAAO;IAtC3B,SAAI,GAAG,EAAE;IAET,YAAO,GAA2B;MAChCC,SAAS,EAAE,QAAQ;MACnBC,WAAW,EAAE,KAAK;MAClBC,WAAW,EAAE,KAAK;MAClBC,sBAAsB,EAAE,IAAI;MAC5BC,OAAO,EAAE,EAAE;MACXC,OAAO,EAAE;KACV;IAED,mBAAc,GAAY,KAAK;IAC/B,gBAAW,GAAG,IAAIT,SAAS,CAAC;MAC1BU,SAAS,EAAE,IAAIX,WAAW,CAAC,EAAE,CAAC;MAC9BY,QAAQ,EAAE,IAAIZ,WAAW,CAAC,EAAE,CAAC;MAC7Ba,WAAW,EAAE,IAAIb,WAAW,CAAC,EAAE,CAAC;MAChCc,KAAK,EAAE,IAAId,WAAW,CAAC,EAAE;KAC1B,CAAC;IACF,kBAAa,GAAG,IAAIC,SAAS,CAAC;MAC5Bc,OAAO,EAAE,IAAIf,WAAW,CAAC,EAAE,CAAC;MAC5BgB,OAAO,EAAE,IAAIhB,WAAW,CAAC,EAAE,CAAC;MAC5BiB,MAAM,EAAE,IAAIjB,WAAW,CAAC,EAAE,CAAC;MAC3BkB,OAAO,EAAE,IAAIlB,WAAW,CAAC,EAAE,CAAC;MAC5BmB,YAAY,EAAE,IAAInB,WAAW,CAAC,EAAE,CAAC;MACjCoB,MAAM,EAAE,IAAIpB,WAAW,CAAC,EAAE,CAAC;MAC3BqB,OAAO,EAAE,IAAIrB,WAAW,CAAC,EAAE,CAAC;MAC5BsB,QAAQ,EAAE,IAAItB,WAAW,CAAC,EAAE,CAAC;MAC7BuB,MAAM,EAAE,IAAIvB,WAAW,CAAC,EAAE;KAG3B,CAAC;EAUF;EARAwB,WAAW,CAACC,KAAoB;IAE5B,OAAOA,KAAK,GAAG,IAAI;EAEvB;EAQAC,QAAQ;IACN,IAAI,CAACtB,OAAO,CAACuB,aAAa,EAAE,CAACC,SAAS,CAACC,IAAI,IAAG;MAC5CC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjB,IAAI,CAACG,OAAO,GAAGH,IAAI;IAErB,CAAC,CACA;IACDI,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAEC,QAAQ,IAAI;MACpD,IAAI,CAACC,MAAM,GAAG;QACZC,GAAG,EAAEF,QAAQ,CAACG,MAAM,CAACC,QAAQ;QAC7BC,GAAG,EAAEL,QAAQ,CAACG,MAAM,CAACG;OACtB;IACH,CAAC,CAAC;EACJ;EAGAC,MAAM;IACJ,IAAI,IAAI,CAACC,IAAI,GAAG,EAAE,EAAE,IAAI,CAACA,IAAI,EAAE;EACjC;EACAC,OAAO;IACL,IAAI,IAAI,CAACD,IAAI,GAAG,CAAC,EAAE,IAAI,CAACA,IAAI,EAAE;EAChC;CACD;AApEY1C,uBAAuB,eANnCH,SAAS,CAAC;EACT+C,QAAQ,EAAE,qBAAqB;EAC/BC,WAAW,EAAE,kCAAkC;EAC/CC,SAAS,EAAE,CAAC,kCAAkC;CAC/C,CAAC,GAEW9C,uBAAuB,CAoEnC;SApEYA,uBAAuB;AAuEpC","names":["Component","FormControl","FormGroup","FiltrareCentreComponent","constructor","centers","mapTypeId","zoomControl","scrollwheel","disableDoubleClickZoom","maxZoom","minZoom","firstName","lastName","phoneNumber","email","plastic","menajer","hartii","baterii","calculatoare","sticla","chimice","metalice","mercur","formatLabel","value","ngOnInit","getAllCenters","subscribe","resp","console","log","markers","navigator","geolocation","getCurrentPosition","position","center","lat","coords","latitude","lng","longitude","zoomIn","zoom","zoomOut","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\acdc1\\pomodoro\\pomodoro\\frontend\\src\\app\\filtrare-centre\\filtrare-centre.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { CentreService } from '../centre.service';\r\n\r\n@Component({\r\n  selector: 'app-filtrare-centre',\r\n  templateUrl: './filtrare-centre.component.html',\r\n  styleUrls: ['./filtrare-centre.component.scss']\r\n})\r\n\r\nexport class FiltrareCentreComponent {\r\n\r\n  zoom = 12;\r\n  center!: google.maps.LatLngLiteral;\r\n  options: google.maps.MapOptions = {\r\n    mapTypeId: 'hybrid',\r\n    zoomControl: false,\r\n    scrollwheel: false,\r\n    disableDoubleClickZoom: true,\r\n    maxZoom: 15,\r\n    minZoom: 8,\r\n  };\r\n\r\n  panelOpenState: boolean = false;\r\n  profileForm = new FormGroup({\r\n    firstName: new FormControl(''),\r\n    lastName: new FormControl(''),\r\n    phoneNumber: new FormControl(''),\r\n    email: new FormControl('')\r\n  });\r\n  estimatesForm = new FormGroup({\r\n    plastic: new FormControl(''),\r\n    menajer: new FormControl(''),\r\n    hartii: new FormControl(''),\r\n    baterii: new FormControl(''),\r\n    calculatoare: new FormControl(''),\r\n    sticla: new FormControl(''),\r\n    chimice: new FormControl(''),\r\n    metalice: new FormControl(''),\r\n    mercur: new FormControl('')\r\n    \r\n    \r\n  })\r\n\r\n  formatLabel(value: number | null) {\r\n\r\n      return value + 'kg';\r\n\r\n  }\r\n\r\n  constructor(private centers: CentreService) {\r\n\r\n  }\r\n\r\n  markers:any;\r\n\r\n  ngOnInit() {\r\n    this.centers.getAllCenters().subscribe(resp => {\r\n      console.log(resp);\r\n      this.markers = resp;\r\n      \r\n    }\r\n    )\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      this.center = {\r\n        lat: position.coords.latitude,\r\n        lng: position.coords.longitude,\r\n      };\r\n    });\r\n  }\r\n\r\n\r\n  zoomIn() {\r\n    if (this.zoom < 15) this.zoom++;\r\n  }\r\n  zoomOut() {\r\n    if (this.zoom > 0) this.zoom--;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n1. plastic\r\n2. menajere\r\n3. hartii\r\n4. baterii\r\n5. calculatoare\r\n6. sticla\r\n7. chimice\r\n8. metalice\r\n9. mercur\r\n\r\n*/"]},"metadata":{},"sourceType":"module","externalDependencies":[]}